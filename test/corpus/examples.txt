====================================
A string constant.
====================================
{{"\"output\""}}
---
(template
  (action
    (interpreted_string_literal
      (escape_sequence)
      (escape_sequence))))

====================================
A raw string constant.
====================================
{{`"output"`}}
---
(template
  (action
    (raw_string_literal)))

====================================
A function call.
====================================
{{printf "%q" "output"}}
---
(template
  (action
    (function_call
      (identifier)
      (argument_list
        (interpreted_string_literal)
        (interpreted_string_literal)))))

====================================
A function call whose final argument comes from the previous command.
====================================
{{"output" | printf "%q"}}
---
(template
  (action
    (chained_pipeline
      (interpreted_string_literal)
      (function_call
        (identifier)
        (argument_list
          (interpreted_string_literal))))))

====================================
A parenthesized argument.
====================================
{{printf "%q" (print "out" "put")}}
---
(template
  (action
    (function_call
      (identifier)
      (argument_list
        (interpreted_string_literal)
        (parenthesized_pipeline
          (function_call
            (identifier)
            (argument_list
              (interpreted_string_literal)
              (interpreted_string_literal))))))))

====================================
A more elaborate call.
====================================
{{"put" | printf "%s%s" "out" | printf "%q"}}
---
    (template
      (action
        (chained_pipeline
          (chained_pipeline
            (interpreted_string_literal)
            (function_call
              (identifier)
              (argument_list
                (interpreted_string_literal)
                (interpreted_string_literal))))
          (function_call
            (identifier)
            (argument_list
              (interpreted_string_literal))))))

====================================
A longer chain.
====================================
{{"output" | printf "%s" | printf "%q"}}
---
(template
  (action
    (chained_pipeline
      (chained_pipeline
        (interpreted_string_literal)
        (function_call
          (identifier)
          (argument_list
            (interpreted_string_literal))))
      (function_call
        (identifier)
        (argument_list
          (interpreted_string_literal))))))

====================================
A with action using dot.
====================================
{{with "output"}}{{printf "%q" .}}{{end}}
---
(template
  (with_action
    (with_start
      (interpreted_string_literal))
    (action
      (function_call
        (identifier)
        (argument_list
          (interpreted_string_literal)
          (dot))))
    (with_end)))

====================================
A with action using dot.
====================================
{{with "output"}}{{printf "%q" .}}{{end}}
---
(template
  (with_action
    (with_start
      (interpreted_string_literal))
    (action
      (function_call
        (identifier)
        (argument_list
          (interpreted_string_literal)
          (dot))))
    (with_end)))

====================================
A with action that creates and uses a variable.
====================================
{{with $x := "output" | printf "%q"}}{{$x}}{{end}}
---
(template
  (with_action
    (with_start
      (variable_definition
        (variable
          (identifier))
        (chained_pipeline
          (interpreted_string_literal)
          (function_call
            (identifier)
            (argument_list
              (interpreted_string_literal))))))
    (action
      (variable
        (identifier)))
    (with_end)))

====================================
A with action that uses the variable in another action.
====================================
{{with $x := "output"}}{{printf "%q" $x}}{{end}}
---
(template
  (with_action
    (with_start
      (variable_definition
        (variable
          (identifier))
        (interpreted_string_literal)))
    (action
      (function_call
        (identifier)
        (argument_list
          (interpreted_string_literal)
          (variable
            (identifier)))))
    (with_end)))

====================================
The same, but pipelined.
====================================
{{with $x := "output"}}{{$x | printf "%q"}}{{end}}
---
(template
  (with_action
    (with_start
      (variable_definition
        (variable
          (identifier))
        (interpreted_string_literal)))
    (action
      (chained_pipeline
        (variable
          (identifier))
        (function_call
          (identifier)
          (argument_list
            (interpreted_string_literal)))))
    (with_end)))
